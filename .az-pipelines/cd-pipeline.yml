trigger:
  - master

pr: none

pool:
  vmImage: 'ubuntu-latest'

variables:
  helm_chart_name: 'hub23-chart'
  helm_release_name: 'hub23'
  helm_version: '2.15.0'
  kubernetes_cluster_name: 'hub23cluster'
  kubernetes_namespace: 'hub23'
  kubernetes_version: '1.18.0'
  resource_group_name: 'Hub23'
  service_connection: 'hub23-deploy-scn'

jobs:
- job: DeployUpgradetoHub23
  steps:
  - task: KubectlInstaller@0
    displayName: 'Stage 1 Step 1: Install kubectl'
    inputs:
      kubectlVersion: $(KUBERNETES_VERSION)

  - task: AzureCLI@1
    displayName: 'Stage 1 Step 2: Merge kubectl config'
    inputs:
      azureSubscription: $(SERVICE_CONNECTION)
      scriptLocation: 'inlineScript'
      inlineScript: |
        az aks get-credentials -n $(KUBERNETES_CLUSTER_NAME) -g $(RESOURCE_GROUP_NAME)

  - task: HelmInstaller@1
    displayName: 'Stage 1 Step 3: Install helm'
    inputs:
      helmVersionToInstall: $(HELM_VERSION)

  - task: HelmDeploy@0
    displayName: 'Stage 1 Step 4: Initialise helm'
    inputs:
      connectionType: 'Azure Resource Manager'
      azureSubscription: $(SERVICE_CONNECTION)
      azureResourceGroup: $(RESOURCE_GROUP_NAME)
      kubernetesCluster: $(KUBERNETES_CLUSTER_NAME)
      namespace: $(KUBERNETES_NAMESPACE)
      command: 'init'
      arguments: '--client-only'
      tillerNamespace: 'kube-system'

  - task: AzureKeyVault@1
    displayName: 'Stage 2 Step 1: Pull Key Vault Secrets'
    inputs:
      azureSubscription: $(SERVICE_CONNECTION)
      KeyVaultName: 'hub23-keyvault'
      SecretsFilter: 'apiToken, secretToken, github-client-id, github-client-secret, SP-appID, SP-key, binderhub-access-token'

  - task: Bash@3
    displayName: 'Stage 2 Step 2: Make .secret folder'
    inputs:
      targetType: 'inline'
      script: 'mkdir -p .secret'

  - task: Bash@3
    displayName: "Stage 2 Step 3: Generate .secret/prod.yaml"
    inputs:
      targetType: 'inline'
      script: |
        sed -e "s/{binderhub_access_token}/$(binderhub-access-token)/" \
        -e "s/{username}/$(SP-appID)/" \
        -e "s/{password}/$(SP-key)/" \
        -e "s/{apiToken}/$(apiToken)/" \
        -e "s/{secretToken}/$(secretToken)/" \
        -e "s/{github_client_id}/$(github-client-id)/" \
        -e "s/{github_client_secret}/$(github-client-secret)/" \
        deploy/prod-template.yaml > .secret/prod.yaml

  - task: Bash@3
    displayName: 'Stage 2 Step 4: Add helm chart repos'
    inputs:
      targetType: 'inline'
      script: |
        helm repo add jupyterhub https://jupyterhub.github.io/helm-chart
        helm repo add nginx-ingress https://kubernetes-charts.storage.googleapis.com
        helm repo add cert-manager https://charts.jetstack.io
        helm repo update
        kubectl apply --validate=false -f https://raw.githubusercontent.com/jetstack/cert-manager/release-0.10/deploy/manifests/00-crds.yaml

  - task: Bash@3
    displayName: 'Stage 2 Step 5: Update local helm chart'
    inputs:
      targetType: 'inline'
      script: |
        cd $(HELM_CHART_NAME) && helm dep up && cd ..

  - task: HelmDeploy@0
    displayName: 'Stage 2 Step 6: Perform helm upgrade'
    inputs:
      connectionType: 'Azure Resource Manager'
      azureSubscription: $(SERVICE_CONNECTION)
      azureResourceGroup: $(RESOURCE_GROUP_NAME)
      kubernetesCluster: $(KUBERNETES_CLUSTER_NAME)
      namespace: $(KUBERNETES_NAMESPACE)
      command: 'upgrade'
      chartType: 'FilePath'
      chartPath: $(HELM_CHART_NAME)
      releaseName: $(HELM_RELEASE_NAME)
      waitForExecution: false
      arguments: '-f deploy/prod.yaml -f .secret/prod.yaml --timeout 600 --cleanup-on-fail'
