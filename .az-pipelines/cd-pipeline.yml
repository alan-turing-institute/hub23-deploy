trigger:
  - main

pr: none

pool:
  vmImage: 'ubuntu-latest'

variables:
  cluster_resource_group_name: 'binder-prod'
  service_connection: 'deploy-scn'

  helm_chart_name: 'hub23-chart'
  helm_release_name: 'hub23'
  helm_version: '3.3.4'

  kubernetes_cluster_name: 'turing'
  kubernetes_namespace: 'hub23'

jobs:
- job: DeployUpgradetoHub23
  steps:
  - task: HelmInstaller@1
    displayName: 'Step 1: Install helm'
    inputs:
      helmVersionToInstall: $(HELM_VERSION)

  - task: AzureKeyVault@1
    displayName: 'Step 2a: Pull Key Vault Secrets - Hub23'
    inputs:
      azureSubscription: $(SERVICE_CONNECTION)
      KeyVaultName: 'hub23-keyvault'
      SecretsFilter: 'apiToken, secretToken, github-client-id, github-client-secret, binderhub-access-token'

  - task: AzureKeyVault@1
    displayName: 'Step 2b: Pull Key Vault Secrets - turingmybinder'
    inputs:
      azureSubscription: $(SERVICE_CONNECTION)
      KeyVaultName: 'turingmybinderkeyvault'
      SecretsFilter: 'appId, appKey'

  - task: Bash@3
    displayName: 'Step 3: Make .secret folder'
    inputs:
      targetType: 'inline'
      script: 'mkdir -p .secret'

  - task: Bash@3
    displayName: "Step 4: Generate .secret/prod.yaml"
    inputs:
      targetType: 'inline'
      script: |
        sed -e "s/{binderhub_access_token}/$(binderhub-access-token)/" \
        -e "s/{username}/$(appId)/" \
        -e "s@{password}@$(appKey)@" \
        -e "s/{apiToken}/$(apiToken)/" \
        -e "s/{secretToken}/$(secretToken)/" \
        -e "s/{github_client_id}/$(github-client-id)/" \
        -e "s/{github_client_secret}/$(github-client-secret)/" \
        deploy/prod-template.yaml > .secret/prod.yaml

  - task: Bash@3
    displayName: 'Step 5: Add helm chart repos'
    inputs:
      targetType: 'inline'
      script: |
        helm repo add jupyterhub https://jupyterhub.github.io/helm-chart
        helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
        helm repo update

  - task: Bash@3
    displayName: 'Step 6: Update local helm chart'
    inputs:
      targetType: 'inline'
      script: |
        cd $(HELM_CHART_NAME) && helm dep up && cd ..

  - task: HelmDeploy@0
    displayName: 'Step 7: Perform helm upgrade'
    inputs:
      connectionType: 'Azure Resource Manager'
      azureSubscription: '$(SERVICE_CONNECTION)'
      azureResourceGroup: '$(CLUSTER_RESOURCE_GROUP_NAME)'
      kubernetesCluster: '$(KUBERNETES_CLUSTER_NAME)'
      useClusterAdmin: true
      namespace: '$(KUBERNETES_NAMESPACE)'
      command: 'upgrade'
      chartType: 'FilePath'
      chartPath: '$(HELM_CHART_NAME)'
      releaseName: '$(HELM_RELEASE_NAME)'
      arguments: '-f deploy/prod.yaml -f .secret/prod.yaml -f deploy/letsencrypt-prod.yaml --timeout 30m0s --wait --cleanup-on-fail --create-namespace'
