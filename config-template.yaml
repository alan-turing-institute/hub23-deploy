config:
  BinderHub:
    template_path: /etc/binderhub/custom/templates
    extra_static_path: /etc/binderhub/custom/static
    extra_static_url_prefix: /extra_static/
    template_variables:
        EXTRA_STATIC_URL_PREFIX: "/extra_static/"

    # connect image registry and set image prefix
    use_registry: true
    image_prefix: <acr-name>.azurecr.io/<prefix>-

    auth_enabled: true

    # jupyterhub IP address
    hub_url: http://<jupyterhub-ip>

  # Authenticate against registry
  DockerRegistry:
    token_url: "https://<acr-name>.azurecr.io/oauth2/token?service=<acr-name>.azurecr.io"

jupyterhub:
  # cull config was taken from mybinder.org
  # assume they know what they're doing
  cull:
    # cull every 11 minutes so it is out of phase
    # with the proxy check-routes interval of five minutes
    every: 660
    timeout: 600
    # maxAge is 6 hours: 6 * 3600 = 21600
    maxAge: 21600

  hub:
    services:
      binder:
        oauth_redirect_uri: "http://<binder-ip>/oauth_callback"
        oauth_client_id: "binder-oauth-client-test"
    extraConfig:
      hub_extra: |
        c.JupyterHub.redirect_to_server = False

      binder: |
        from kubespawner import KubeSpawner

        class BinderSpawner(KubeSpawner):
          def start(self):
            if 'image' in self.user_options:
              # binder service sets the image spec via user options
              self.image = self.user_options['image']
            return super().start()
        c.JupyterHub.spawner_class = BinderSpawner

  singleuser:
    # to make notebook servers aware of hub
    cmd: jupyterhub-singleuser
    # limit CPUs and RAM
    memory:
      limit: 1G
      guarantee: 1G
    cpu:
      limit: .5
      guarantee: .5

  # pre-pull images onto pods so that users aren't left waiting as long
  prePuller:
    continuous:
      enabled: true

  scheduling:
    # schedule 3 dummy pods to reduce user wait time
    podPriority:
      enabled: true
    userPlaceholder:
      # Specify three dummy user pods will be used as placeholders
      replicas: 3

    # enable user scheduler to facilitate the efficient scheduling of user pods
    userScheduler:
      enabled: true

  auth:
    type: github
    admin:
      access: true
      users:
        - sgibson91
    github:
      clientId: "<github-client-id>"
      clientSecret: "<github-client-secret>"
      callbackUrl: "http://<jupyterhub-ip>/hub/oauth_callback"
      orgWhitelist:
        - "<github-org-name>"
    scopes:
      - "read:user"

initContainers:
  - name: git-clone-templates
    image: alpine/git
    args:
      - clone
      - --single-branch
      - --branch=feature/logo-update
      - --depth=1
      - --
      - https://github.com/alan-turing-institute/hub23-deploy
      - /etc/binderhub/custom
    securityContext:
      runAsUser: 0
    volumeMounts:
      - name: custom-templates
        mountPath: /etc/binderhub/custom
extraVolumes:
  - name: custom-templates
    emptyDir: {}
extraVolumeMounts:
  - name: custom-templates
    mountPath: /etc/binderhub/custom
