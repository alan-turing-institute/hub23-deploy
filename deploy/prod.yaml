projectName: hub23

binderhub:
  config:
    BinderHub:
      image_prefix: hub23registry.azurecr.io/hub23/binder-dev-
      hub_url: http://hub.hub23.turing.ac.uk
      auth_enabled: true

      template_path: /etc/binderhub/custom/templates
      extra_static_path: /etc/binderhub/custom/static
      extra_static_url_prefix: /extra_static/
      template_variables:
        EXTRA_STATIC_URL_PREFIX: "/extra_static/"

    DockerRegistry:
      token_url: "https://hub23registry.azurecr.io/oauth2/token?service=hub23registry.azurecr.io"

  registry:
    url: https://hub23registry.azurecr.io

  jupyterhub:
    cull:
      every: 660
      timeout: 600
      maxAge: 21600  # maxAge is 6 hours: 6 * 3600 = 21600

    hub:
        services:
          binder:
            oauth_redirect_uri: "http://binder.hub23.turing.ac.uk/oauth_callback"
            oauth_client_id: "binder-oauth-client-test"
        extraConfig:
          hub_extra: |
            c.JupyterHub.redirect_to_server = False
          binder: |
            from kubespawner import KubeSpawner
            class BinderSpawner(KubeSpawner):
              def start(self):
                if 'image' in self.user_options:
                  # binder service sets the image spec via user options
                  self.image = self.user_options['image']
                return super().start()
            c.JupyterHub.spawner_class = BinderSpawner

    singleuser:
      cmd: jupyterhub-singleuser
      memory:
        limit: 1G
        guarantee: 1G
      cpu:
        limit: .5
        guarantee: .5

    prePuller:
      continuous:
        enabled: true

    scheduling:
      podPriority:
        enabled: true
      userPlaceholder:
        replicas: 3
      userScheduler:
        enabled: true

    auth:
      type: github
      admin:
        access: true
        users:
          - "sgibson91"
      github:
        callbackUrl: "http://hub.hub23.turing.ac.uk/hub/oauth_callback"
        orgWhitelist:
          - "binderhub-test-org"
      scopes:
        - "read:user"

  initContainers:
    - name: git-clone-templates
      image: alpine/git
      args:
        - clone
        - --single-branch
        - --branch=master
        - --depth=1
        - --
        - https://github.com/alan-turing-institute/hub23-deploy
        - /etc/binderhub/custom
      securityContext:
        runAsUser: 0
      volumeMounts:
        - name: custom-templates
          mountPath: /etc/binderhub/custom
  extraVolumes:
    - name: custom-templates
      emptyDir: {}
  extraVolumeMounts:
    - name: custom-templates
      mountPath: /etc/binderhub/custom
